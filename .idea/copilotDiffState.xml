<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/AppNavigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/AppNavigation.kt" />
              <option name="originalContent" value="package com.example.habito&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.habito.Pages.Navigation&#10;import com.example.habito.Navigation.MainScreen&#10;import com.example.habito.viewmodel.AuthViewModel&#10;import com.example.habito.viewmodel.AuthState&#10;import android.util.Log&#10;&#10;@Composable&#10;fun AppNavigation(&#10;    authViewModel: AuthViewModel = viewModel(),&#10;    onError: (String) -&gt; Unit = {}&#10;) {&#10;    // Create a single NavController for the entire app&#10;    val navController = rememberNavController()&#10;    val authState by authViewModel.authState.collectAsState()&#10;&#10;    // Log the current auth state for debugging&#10;    DisposableEffect(authState) {&#10;        val stateType = when (authState) {&#10;            is AuthState.Authenticated -&gt; &quot;Authenticated&quot;&#10;            is AuthState.Unauthenticated -&gt; &quot;Unauthenticated&quot;&#10;            is AuthState.Loading -&gt; &quot;Loading&quot;&#10;            is AuthState.Error -&gt; &quot;Error: ${(authState as AuthState.Error).message}&quot;&#10;        }&#10;        Log.d(&quot;HabitoApp&quot;, &quot;Current auth state: $stateType&quot;)&#10;        onDispose {}&#10;    }&#10;&#10;    try {&#10;        // Pass the shared NavController and ViewModel to child components&#10;        when (authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                // If user is authenticated, show the main app screen with bottom navigation&#10;                MainScreen(navController = navController)&#10;            }&#10;            else -&gt; {&#10;                // Otherwise, show the login/signup flow&#10;                Navigation(&#10;                    navController = navController,&#10;                    authViewModel = authViewModel,&#10;                    onAuthSuccess = { /* Already handled by the authState observer */ }&#10;                )&#10;            }&#10;        }&#10;    } catch (e: Exception) {&#10;        Log.e(&quot;HabitoApp&quot;, &quot;Error in AppNavigation&quot;, e)&#10;        onError(e.message ?: &quot;Unknown error in navigation&quot;)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.DisposableEffect&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.habito.Pages.Navigation&#10;import com.example.habito.Navigation.MainScreen&#10;import com.example.habito.viewmodel.AuthViewModel&#10;import com.example.habito.viewmodel.AuthState&#10;import android.util.Log&#10;&#10;@Composable&#10;fun AppNavigation(&#10;    authViewModel: AuthViewModel = viewModel(),&#10;    onError: (String) -&gt; Unit = {}&#10;) {&#10;    // Create a single NavController for the entire app&#10;    val navController = rememberNavController()&#10;    val authState by authViewModel.authState.collectAsState()&#10;&#10;    // Log the current auth state for debugging&#10;    DisposableEffect(authState) {&#10;        val stateType = when (authState) {&#10;            is AuthState.Authenticated -&gt; &quot;Authenticated&quot;&#10;            is AuthState.Unauthenticated -&gt; &quot;Unauthenticated&quot;&#10;            is AuthState.Loading -&gt; &quot;Loading&quot;&#10;            is AuthState.Error -&gt; &quot;Error: ${(authState as AuthState.Error).message}&quot;&#10;        }&#10;        Log.d(&quot;HabitoApp&quot;, &quot;Current auth state: $stateType&quot;)&#10;        onDispose {}&#10;    }&#10;&#10;    // Pass the shared NavController and ViewModel to child components&#10;    // No try-catch around composable invocations as it's not supported&#10;    when (authState) {&#10;        is AuthState.Authenticated -&gt; {&#10;            // If user is authenticated, show the main app screen with bottom navigation&#10;            MainScreen(navController = navController)&#10;        }&#10;        else -&gt; {&#10;            // Otherwise, show the login/signup flow&#10;            Navigation(&#10;                navController = navController,&#10;                authViewModel = authViewModel,&#10;                onAuthSuccess = { /* Already handled by the authState observer */ }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/AddHabitScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/AddHabitScreen.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@Composable&#10;fun AddHabitScreen(&#10;    navController: NavController,&#10;    onAddHabit: (Habit) -&gt; Unit&#10;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Add New Habit&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(24.dp)&#10;                .fillMaxSize(),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            TextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Habit Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Habit Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(&#10;                onClick = {&#10;                    if (title.isNotBlank()) {&#10;                        onAddHabit(Habit(title, description))&#10;                        navController.popBackStack()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4C67F3))&#10;            ) {&#10;                Text(&quot;Save Habit&quot;, color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddHabitScreen(&#10;    navController: NavController,&#10;    onAddHabit: (Habit) -&gt; Unit&#10;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Add New Habit&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(24.dp)&#10;                .fillMaxSize(),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            TextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Habit Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Habit Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(&#10;                onClick = {&#10;                    if (title.isNotBlank()) {&#10;                        onAddHabit(Habit(title, description))&#10;                        navController.popBackStack()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4C67F3))&#10;            ) {&#10;                Text(&quot;Save Habit&quot;, color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/LoginPage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/LoginPage.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.habito.ui.theme.AppColors&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onLoginSuccess: () -&gt; Unit,&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onNavigateToForgotPassword: () -&gt; Unit,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.PeaceBlue)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // App Icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(AppColors.Blue)&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Habito&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Blue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            &quot;Welcome back! Let's stay consistent.&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Email&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Forgot Password Link&#10;        Text(&#10;            text = &quot;Forgot Password?&quot;,&#10;            color = AppColors.Blue,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.End)&#10;                .clickable {&#10;                    onNavigateToForgotPassword()&#10;                }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Login Button&#10;        Button(&#10;            onClick = {&#10;                viewModel.loginUser(email.trim(), password.trim())&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = AppColors.Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            if (authState is AuthState.Loading) {&#10;                CircularProgressIndicator(&#10;                    color = Color.White,&#10;                    strokeWidth = 2.dp,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Log In&quot;, color = Color.White, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Navigate to Signup&#10;        Row {&#10;            Text(&quot;Don’t have an account? &quot;)&#10;            Text(&#10;                &quot;Sign Up&quot;,&#10;                color = AppColors.Blue,&#10;                modifier = Modifier.clickable {&#10;                    onNavigateToSignup()&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Handle State Changes&#10;    LaunchedEffect(authState) {&#10;        when (authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Login Successful&quot;, Toast.LENGTH_SHORT).show()&#10;                onLoginSuccess()&#10;            }&#10;&#10;            is AuthState.Error -&gt; {&#10;                val message = (authState as AuthState.Error).message&#10;                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.habito.ui.theme.AppColors&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onLoginSuccess: () -&gt; Unit,&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onNavigateToForgotPassword: () -&gt; Unit,&#10;    viewModel: AuthViewModel&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.PeaceBlue)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // App Icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(AppColors.Blue)&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Habito&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Blue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            &quot;Welcome back! Let's stay consistent.&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Email&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Forgot Password Link&#10;        Text(&#10;            text = &quot;Forgot Password?&quot;,&#10;            color = AppColors.Blue,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.End)&#10;                .clickable {&#10;                    onNavigateToForgotPassword()&#10;                }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Login Button&#10;        Button(&#10;            onClick = {&#10;                viewModel.loginUser(email.trim(), password.trim())&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = AppColors.Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            if (authState is AuthState.Loading) {&#10;                CircularProgressIndicator(&#10;                    color = Color.White,&#10;                    strokeWidth = 2.dp,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Log In&quot;, color = Color.White, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Navigate to Signup&#10;        Row {&#10;            Text(&quot;Don’t have an account? &quot;)&#10;            Text(&#10;                &quot;Sign Up&quot;,&#10;                color = AppColors.Blue,&#10;                modifier = Modifier.clickable {&#10;                    onNavigateToSignup()&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Handle State Changes&#10;    LaunchedEffect(authState) {&#10;        when (authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Login Successful&quot;, Toast.LENGTH_SHORT).show()&#10;                onLoginSuccess()&#10;            }&#10;&#10;            is AuthState.Error -&gt; {&#10;                val message = (authState as AuthState.Error).message&#10;                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/Navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/Navigation.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.habito.Pages.Habit&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun Navigation(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel,&#10;    onAuthSuccess: () -&gt; Unit&#10;) {&#10;    NavHost(navController = navController, startDestination = &quot;login&quot;) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(&#10;                onLoginSuccess = {&#10;                    onAuthSuccess()&#10;                    navController.navigate(&quot;home&quot;) {&#10;                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                },&#10;                onNavigateToSignup = {&#10;                    navController.navigate(&quot;signup&quot;) {&#10;                        launchSingleTop = true&#10;                    }&#10;                },&#10;                onNavigateToForgotPassword = { /* TODO: Navigate to ForgotPasswordScreen */ },&#10;                viewModel = authViewModel // Pass the shared ViewModel&#10;            )&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(&#10;                onNavigateToLogin = {&#10;                    navController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                }&#10;            )&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            val habits = remember {&#10;                mutableStateListOf(&#10;                    Habit(&quot;Drink Water&quot;, &quot;Stay hydrated and fresh&quot;),&#10;                    Habit(&quot;Read 10 pages&quot;, &quot;Daily reading habit&quot;),&#10;                    Habit(&quot;Exercise&quot;, &quot;15 min of body movement&quot;)&#10;                )&#10;            }&#10;            HomeScreen(&#10;                habits = habits,&#10;                navController = navController,&#10;                onToggleComplete = { toggledHabit -&gt;&#10;                    val index = habits.indexOf(toggledHabit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(isCompleted = !habits[index].isCompleted)&#10;                    }&#10;                },&#10;                onEditHabit = { habit, newTitle, newDesc -&gt;&#10;                    val index = habits.indexOf(habit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(title = newTitle, description = newDesc)&#10;                    }&#10;                },&#10;                onDeleteHabit = { habit -&gt;&#10;                    habits.remove(habit)&#10;                },&#10;                onAddHabit = { newHabit -&gt;&#10;                    habits.add(newHabit)&#10;                }&#10;            )&#10;        }&#10;        // Add HomeScreen and AddHabitScreen navigation as needed&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.mutableStateListOf&#10;import androidx.navigation.NavHostController&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import com.example.habito.Pages.Habit&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun Navigation(&#10;    navController: NavHostController,&#10;    authViewModel: AuthViewModel,&#10;    onAuthSuccess: () -&gt; Unit&#10;) {&#10;    NavHost(navController = navController, startDestination = &quot;login&quot;) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(&#10;                onLoginSuccess = {&#10;                    onAuthSuccess()&#10;                    navController.navigate(&quot;home&quot;) {&#10;                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                },&#10;                onNavigateToSignup = {&#10;                    navController.navigate(&quot;signup&quot;) {&#10;                        launchSingleTop = true&#10;                    }&#10;                },&#10;                onNavigateToForgotPassword = { /* TODO: Navigate to ForgotPasswordScreen */ },&#10;                viewModel = authViewModel // Pass the shared ViewModel&#10;            )&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(&#10;                onNavigateToLogin = {&#10;                    navController.navigate(&quot;login&quot;) {&#10;                        popUpTo(&quot;signup&quot;) { inclusive = true }&#10;                        launchSingleTop = true&#10;                    }&#10;                },&#10;                authViewModel = authViewModel&#10;            )&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            val habits = remember {&#10;                mutableStateListOf(&#10;                    Habit(&quot;Drink Water&quot;, &quot;Stay hydrated and fresh&quot;),&#10;                    Habit(&quot;Read 10 pages&quot;, &quot;Daily reading habit&quot;),&#10;                    Habit(&quot;Exercise&quot;, &quot;15 min of body movement&quot;)&#10;                )&#10;            }&#10;            HomeScreen(&#10;                habits = habits,&#10;                navController = navController,&#10;                onToggleComplete = { toggledHabit -&gt;&#10;                    val index = habits.indexOf(toggledHabit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(isCompleted = !habits[index].isCompleted)&#10;                    }&#10;                },&#10;                onEditHabit = { habit, newTitle, newDesc -&gt;&#10;                    val index = habits.indexOf(habit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(title = newTitle, description = newDesc)&#10;                    }&#10;                },&#10;                onDeleteHabit = { habit -&gt;&#10;                    habits.remove(habit)&#10;                },&#10;                onAddHabit = { newHabit -&gt;&#10;                    habits.add(newHabit)&#10;                }&#10;            )&#10;        }&#10;        // Add HomeScreen and AddHabitScreen navigation as needed&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/SignupPage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/SignupPage.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.habito.ui.theme.Blue&#10;import com.example.habito.ui.theme.LightBlue&#10;import com.example.habito.ui.theme.PeaceBlue&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.ui.draw.clip&#10;&#10;@Composable&#10;fun SignupScreen(onNavigateToLogin: () -&gt; Unit) {&#10;    val authViewModel: AuthViewModel = viewModel()&#10;    val authState by authViewModel.authState.collectAsState()&#10;&#10;    val context = LocalContext.current&#10;&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(authState) {&#10;        when (val state = authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Signup Successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                onNavigateToLogin()&#10;            }&#10;            is AuthState.Error -&gt; {&#10;                Toast.makeText(context, state.message, Toast.LENGTH_SHORT).show()&#10;            }&#10;            else -&gt; Unit&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(PeaceBlue)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // Logo Circle with H&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(Blue)&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // App Name&#10;        Text(&quot;Habito&quot;, fontSize = 28.sp, fontWeight = FontWeight.Bold, color = Color(0xFF2F7DF6))&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        // Tagline&#10;        Text(&#10;            &quot;Build better habits, one beautiful tap at a time&quot;,&#10;            textAlign = TextAlign.Center,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.padding(horizontal = 12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Name Field&#10;        OutlinedTextField(&#10;            value = name,&#10;            onValueChange = { name = it },&#10;            label = { Text(&quot;Name&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = {&#10;                if (name.isNotBlank() &amp;&amp; email.isNotBlank() &amp;&amp; password.isNotBlank()) {&#10;                    authViewModel.signupUser(email, password) // Use correct function name and params&#10;                } else {&#10;                    Toast.makeText(context, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Blue),&#10;        ) {&#10;            when (authState) {&#10;                is AuthState.Loading -&gt; {&#10;                    CircularProgressIndicator(color = Color.White)&#10;                }&#10;                else -&gt; {&#10;                    Text(&quot;Sign Up&quot;, color = Color.White, fontSize = 16.sp)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            &quot;Already have an account? Login&quot;,&#10;            modifier = Modifier.clickable { onNavigateToLogin() },&#10;            color = Blue&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.habito.ui.theme.Blue&#10;import com.example.habito.ui.theme.LightBlue&#10;import com.example.habito.ui.theme.PeaceBlue&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.ui.draw.clip&#10;&#10;@Composable&#10;fun SignupScreen(&#10;    onNavigateToLogin: () -&gt; Unit,&#10;    authViewModel: AuthViewModel&#10;) {&#10;    val authState by authViewModel.authState.collectAsState()&#10;&#10;    val context = LocalContext.current&#10;&#10;    var name by remember { mutableStateOf(&quot;&quot;) }&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(authState) {&#10;        when (val state = authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Signup Successful!&quot;, Toast.LENGTH_SHORT).show()&#10;                onNavigateToLogin()&#10;            }&#10;            is AuthState.Error -&gt; {&#10;                Toast.makeText(context, state.message, Toast.LENGTH_SHORT).show()&#10;            }&#10;            else -&gt; Unit&#10;        }&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(PeaceBlue)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // Logo Circle with H&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(Blue)&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // App Name&#10;        Text(&quot;Habito&quot;, fontSize = 28.sp, fontWeight = FontWeight.Bold, color = Color(0xFF2F7DF6))&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        // Tagline&#10;        Text(&#10;            &quot;Build better habits, one beautiful tap at a time&quot;,&#10;            textAlign = TextAlign.Center,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.padding(horizontal = 12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Name Field&#10;        OutlinedTextField(&#10;            value = name,&#10;            onValueChange = { name = it },&#10;            label = { Text(&quot;Name&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Email Field&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password Field&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            colors = OutlinedTextFieldDefaults.colors(&#10;                focusedBorderColor = Blue,&#10;                unfocusedBorderColor = LightBlue&#10;            )&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Sign Up Button&#10;        Button(&#10;            onClick = {&#10;                if (name.isNotBlank() &amp;&amp; email.isNotBlank() &amp;&amp; password.isNotBlank()) {&#10;                    authViewModel.signupUser(email, password) // Use correct function name and params&#10;                } else {&#10;                    Toast.makeText(context, &quot;Please fill all fields&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Blue),&#10;        ) {&#10;            when (authState) {&#10;                is AuthState.Loading -&gt; {&#10;                    CircularProgressIndicator(color = Color.White)&#10;                }&#10;                else -&gt; {&#10;                    Text(&quot;Sign Up&quot;, color = Color.White, fontSize = 16.sp)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            &quot;Already have an account? Login&quot;,&#10;            modifier = Modifier.clickable { onNavigateToLogin() },&#10;            color = Blue&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.habito.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Custom Color Theme&#10;val Blue = Color(0xFF1565C0)&#10;val LightBlue = Color(0xFF64B5F6)&#10;val PeaceBlue = Color(0xFFE3F2FD)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.habito.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Custom Color Theme&#10;object AppColors {&#10;    val Blue = Color(0xFF1565C0)&#10;    val LightBlue = Color(0xFF64B5F6)&#10;    val PeaceBlue = Color(0xFFE3F2FD)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/viewmodel/AuthViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/viewmodel/AuthViewModel.kt" />
              <option name="originalContent" value="package com.example.habito.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class AuthViewModel : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Unauthenticated)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState&#10;&#10;    fun loginUser(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            delay(1000) // Simulate network request&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                _authState.value = AuthState.Authenticated&#10;            } else {&#10;                _authState.value = AuthState.Error(&quot;Email and password cannot be empty.&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signupUser(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            _authState.value = AuthState.Loading&#10;            delay(1000) // Simulate network request&#10;            if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                // In a real app, you'd also check if the user already exists.&#10;                _authState.value = AuthState.Authenticated&#10;            } else {&#10;                _authState.value = AuthState.Error(&quot;Email and password cannot be empty.&quot;)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import kotlinx.coroutines.CancellationException&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.launch&#10;&#10;class AuthViewModel : ViewModel() {&#10;&#10;    private val _authState = MutableStateFlow&lt;AuthState&gt;(AuthState.Unauthenticated)&#10;    val authState: StateFlow&lt;AuthState&gt; = _authState&#10;&#10;    fun loginUser(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _authState.value = AuthState.Loading&#10;                delay(1000) // Simulate network request&#10;                if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                    _authState.value = AuthState.Authenticated&#10;                } else {&#10;                    _authState.value = AuthState.Error(&quot;Email and password cannot be empty.&quot;)&#10;                }&#10;            } catch (e: CancellationException) {&#10;                // This is expected when the user navigates away.&#10;                // We reset the state and allow the coroutine to be cancelled.&#10;                _authState.value = AuthState.Unauthenticated&#10;            }&#10;        }&#10;    }&#10;&#10;    fun signupUser(email: String, password: String) {&#10;        viewModelScope.launch {&#10;            try {&#10;                _authState.value = AuthState.Loading&#10;                delay(1000) // Simulate network request&#10;                if (email.isNotEmpty() &amp;&amp; password.isNotEmpty()) {&#10;                    // In a real app, you'd also check if the user already exists.&#10;                    _authState.value = AuthState.Authenticated&#10;                } else {&#10;                    _authState.value = AuthState.Error(&quot;Email and password cannot be empty.&quot;)&#10;                }&#10;            } catch (e: CancellationException) {&#10;                // This is expected when the user navigates away.&#10;                _authState.value = AuthState.Unauthenticated&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>