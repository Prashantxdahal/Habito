<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Navigation/BottomNavitem.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Navigation/BottomNavitem.kt" />
              <option name="originalContent" value="package com.example.habito.Navigation&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;sealed class BottomNavItem(&#10;    val route: String,&#10;    val icon: ImageVector,&#10;    val title: String&#10;) {&#10;    object Home : BottomNavItem(&quot;home&quot;, Icons.Default.Home, &quot;Home&quot;)&#10;    object Progress : BottomNavItem(&quot;progress&quot;, Icons.Default.Assessment, &quot;Progress&quot;)&#10;    object Profile : BottomNavItem(&quot;profile&quot;, Icons.Default.Person, &quot;Profile&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Navigation&#10;&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;sealed class BottomNavItem(&#10;    val route: String,&#10;    val icon: ImageVector,&#10;    val title: String&#10;) {&#10;    object Home : BottomNavItem(&quot;home&quot;, Icons.Default.Home, &quot;Home&quot;)&#10;    object Progress : BottomNavItem(&quot;progress&quot;, Icons.Default.List, &quot;Progress&quot;)&#10;    object Profile : BottomNavItem(&quot;profile&quot;, Icons.Default.Person, &quot;Profile&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/AddHabitScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/AddHabitScreen.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@Composable&#10;fun AddHabitScreen(&#10;    navController: NavController,&#10;    onAddHabit: (Habit) -&gt; Unit&#10;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Add New Habit&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.Default.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(24.dp)&#10;                .fillMaxSize(),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            TextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Habit Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Habit Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(&#10;                onClick = {&#10;                    if (title.isNotBlank()) {&#10;                        onAddHabit(Habit(title, description))&#10;                        navController.popBackStack()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4C67F3))&#10;            ) {&#10;                Text(&quot;Save Habit&quot;, color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.automirrored.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.navigation.NavController&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun AddHabitScreen(&#10;    navController: NavController,&#10;    onAddHabit: (Habit) -&gt; Unit&#10;) {&#10;    var title by remember { mutableStateOf(&quot;&quot;) }&#10;    var description by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;Add New Habit&quot;) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = { navController.popBackStack() }) {&#10;                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = &quot;Back&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .padding(padding)&#10;                .padding(24.dp)&#10;                .fillMaxSize(),&#10;            verticalArrangement = Arrangement.Top,&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            TextField(&#10;                value = title,&#10;                onValueChange = { title = it },&#10;                label = { Text(&quot;Habit Title&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;            TextField(&#10;                value = description,&#10;                onValueChange = { description = it },&#10;                label = { Text(&quot;Habit Description&quot;) },&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(&#10;                onClick = {&#10;                    if (title.isNotBlank()) {&#10;                        onAddHabit(Habit(title, description))&#10;                        navController.popBackStack()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(50.dp),&#10;                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF4C67F3))&#10;            ) {&#10;                Text(&quot;Save Habit&quot;, color = Color.White, fontSize = 16.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/HabitCard.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/HabitCard.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.font.FontWeight&#10;&#10;@Composable&#10;fun HabitCard(&#10;    habit: Habit,&#10;    onEdit: (Habit) -&gt; Unit,&#10;    onDelete: (Habit) -&gt; Unit,&#10;    onToggleComplete: (Habit) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFFF2F5FC)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = habit.title,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = if (habit.isCompleted) Color.Gray else Blue&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = habit.description,&#10;                    fontSize = 14.sp,&#10;                    color = if (habit.isCompleted) Color.LightGray else Color.DarkGray&#10;                )&#10;            }&#10;&#10;            Checkbox(&#10;                checked = habit.isCompleted,&#10;                onCheckedChange = { onToggleComplete(habit) },&#10;                colors = CheckboxDefaults.colors(checkedColor = Blue)&#10;            )&#10;&#10;            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                IconButton(&#10;                    onClick = { onEdit(habit) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = Blue,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { onDelete(habit) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Delete&#10;import androidx.compose.material.icons.filled.Edit&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.example.habito.ui.theme.AppColors.Blue&#10;&#10;@Composable&#10;fun HabitCard(&#10;    habit: Habit,&#10;    onEdit: (Habit) -&gt; Unit,&#10;    onDelete: (Habit) -&gt; Unit,&#10;    onToggleComplete: (Habit) -&gt; Unit&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 4.dp, horizontal = 8.dp),&#10;        shape = RoundedCornerShape(16.dp),&#10;        colors = CardDefaults.cardColors(containerColor = Color(0xFFF2F5FC)),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)&#10;    ) {&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Column(&#10;                modifier = Modifier.weight(1f)&#10;            ) {&#10;                Text(&#10;                    text = habit.title,&#10;                    fontWeight = FontWeight.Bold,&#10;                    fontSize = 16.sp,&#10;                    color = if (habit.isCompleted) Color.Gray else Blue&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = habit.description,&#10;                    fontSize = 14.sp,&#10;                    color = if (habit.isCompleted) Color.LightGray else Color.DarkGray&#10;                )&#10;            }&#10;&#10;            Checkbox(&#10;                checked = habit.isCompleted,&#10;                onCheckedChange = { onToggleComplete(habit) },&#10;                colors = CheckboxDefaults.colors(checkedColor = Blue)&#10;            )&#10;&#10;            Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;                IconButton(&#10;                    onClick = { onEdit(habit) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Edit,&#10;                        contentDescription = &quot;Edit&quot;,&#10;                        tint = Blue,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;                IconButton(&#10;                    onClick = { onDelete(habit) },&#10;                    modifier = Modifier.size(28.dp)&#10;                ) {&#10;                    Icon(&#10;                        Icons.Default.Delete,&#10;                        contentDescription = &quot;Delete&quot;,&#10;                        tint = Color.Red,&#10;                        modifier = Modifier.size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/HomePage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/HomePage.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.habito.ui.theme.AppColors&#10;&#10;data class Habit(val title: String, val description: String, val isCompleted: Boolean = false)&#10;&#10;@Composable&#10;fun HomeScreen() {&#10;    val habits = remember {&#10;        mutableStateListOf(&#10;            Habit(&quot;Drink Water&quot;, &quot;Stay hydrated and fresh&quot;),&#10;            Habit(&quot;Read 10 pages&quot;, &quot;Daily reading habit&quot;),&#10;            Habit(&quot;Exercise&quot;, &quot;15 min of body movement&quot;)&#10;        )&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;Your Habits&quot;, fontSize = 24.sp, fontWeight = FontWeight.Bold, color = AppColors.Blue)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        LazyColumn(modifier = Modifier.weight(1f)) {&#10;            items(habits) { habit -&gt;&#10;                // Removed HabitCard composable from this file to resolve overload ambiguity.&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Button(&#10;            onClick = {&#10;                // TODO: Navigate to Add Habit Screen&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = AppColors.Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Text(&quot;＋ Add Habit&quot;, color = Color.White, fontSize = 16.sp)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.habito.ui.theme.AppColors&#10;&#10;data class Habit(val title: String, val description: String, val isCompleted: Boolean = false)&#10;&#10;@Composable&#10;fun HomeScreen() {&#10;    val habits = remember {&#10;        mutableStateListOf(&#10;            Habit(&quot;Drink Water&quot;, &quot;Stay hydrated and fresh&quot;),&#10;            Habit(&quot;Read 10 pages&quot;, &quot;Daily reading habit&quot;),&#10;            Habit(&quot;Exercise&quot;, &quot;15 min of body movement&quot;)&#10;        )&#10;    }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&quot;Your Habits&quot;, fontSize = 24.sp, fontWeight = FontWeight.Bold, color = AppColors.Blue)&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        LazyColumn(modifier = Modifier.weight(1f)) {&#10;            items(habits) { habit -&gt;&#10;                HabitCard(&#10;                    habit = habit,&#10;                    onEdit = { /* TODO: Implement edit */ },&#10;                    onDelete = { /* TODO: Implement delete */ },&#10;                    onToggleComplete = { toggledHabit: Habit -&gt;&#10;                        val index = habits.indexOf(toggledHabit)&#10;                        if (index != -1) {&#10;                            habits[index] = habits[index].copy(isCompleted = !habits[index].isCompleted)&#10;                        }&#10;                    }&#10;                )&#10;                Spacer(modifier = Modifier.height(12.dp))&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;        Button(&#10;            onClick = {&#10;                // TODO: Navigate to Add Habit Screen&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = AppColors.Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            Text(&quot;＋ Add Habit&quot;, color = Color.White, fontSize = 16.sp)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/LoginPage.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/LoginPage.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.habito.ui.theme.Blue&#10;import com.example.habito.ui.theme.PeaceBlue&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onLoginSuccess: () -&gt; Unit,&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onNavigateToForgotPassword: () -&gt; Unit,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(PeaceBlue) // Use only the imported PeaceBlue&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // App Icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(Blue) // Use only the imported Blue&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Habito&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Blue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            &quot;Welcome back! Let's stay consistent.&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Email&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Forgot Password Link&#10;        Text(&#10;            text = &quot;Forgot Password?&quot;,&#10;            color = Blue,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.End)&#10;                .clickable {&#10;                    onNavigateToForgotPassword()&#10;                }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Login Button&#10;        Button(&#10;            onClick = {&#10;                viewModel.loginUser(email.trim(), password.trim())&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            if (authState is AuthState.Loading) {&#10;                CircularProgressIndicator(&#10;                    color = Color.White,&#10;                    strokeWidth = 2.dp,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Log In&quot;, color = Color.White, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Navigate to Signup&#10;        Row {&#10;            Text(&quot;Don’t have an account? &quot;)&#10;            Text(&#10;                &quot;Sign Up&quot;,&#10;                color = Blue,&#10;                modifier = Modifier.clickable {&#10;                    onNavigateToSignup()&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Handle State Changes&#10;    LaunchedEffect(authState) {&#10;        when (authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Login Successful&quot;, Toast.LENGTH_SHORT).show()&#10;                onLoginSuccess()&#10;            }&#10;&#10;            is AuthState.Error -&gt; {&#10;                val message = (authState as AuthState.Error).message&#10;                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import android.widget.Toast&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.input.PasswordVisualTransformation&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import com.example.habito.ui.theme.AppColors&#10;import com.example.habito.viewmodel.AuthState&#10;import com.example.habito.viewmodel.AuthViewModel&#10;&#10;@Composable&#10;fun LoginScreen(&#10;    onLoginSuccess: () -&gt; Unit,&#10;    onNavigateToSignup: () -&gt; Unit,&#10;    onNavigateToForgotPassword: () -&gt; Unit,&#10;    viewModel: AuthViewModel = viewModel()&#10;) {&#10;    var email by remember { mutableStateOf(&quot;&quot;) }&#10;    var password by remember { mutableStateOf(&quot;&quot;) }&#10;    val context = LocalContext.current&#10;    val authState by viewModel.authState.collectAsState()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(AppColors.PeaceBlue)&#10;            .padding(24.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Center&#10;    ) {&#10;&#10;        // App Icon&#10;        Box(&#10;            contentAlignment = Alignment.Center,&#10;            modifier = Modifier&#10;                .size(100.dp)&#10;                .clip(CircleShape)&#10;                .background(AppColors.Blue)&#10;        ) {&#10;            Text(&quot;H&quot;, color = Color.White, fontSize = 36.sp, fontWeight = FontWeight.Bold)&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        Text(&#10;            text = &quot;Habito&quot;,&#10;            fontSize = 28.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = AppColors.Blue&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;&#10;        Text(&#10;            &quot;Welcome back! Let's stay consistent.&quot;,&#10;            fontSize = 14.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(24.dp))&#10;&#10;        // Email&#10;        OutlinedTextField(&#10;            value = email,&#10;            onValueChange = { email = it },&#10;            label = { Text(&quot;Email&quot;) },&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        // Password&#10;        OutlinedTextField(&#10;            value = password,&#10;            onValueChange = { password = it },&#10;            label = { Text(&quot;Password&quot;) },&#10;            visualTransformation = PasswordVisualTransformation(),&#10;            modifier = Modifier.fillMaxWidth(),&#10;            shape = RoundedCornerShape(12.dp)&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // Forgot Password Link&#10;        Text(&#10;            text = &quot;Forgot Password?&quot;,&#10;            color = AppColors.Blue,&#10;            fontSize = 14.sp,&#10;            modifier = Modifier&#10;                .align(Alignment.End)&#10;                .clickable {&#10;                    onNavigateToForgotPassword()&#10;                }&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(20.dp))&#10;&#10;        // Login Button&#10;        Button(&#10;            onClick = {&#10;                viewModel.loginUser(email.trim(), password.trim())&#10;            },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(50.dp),&#10;            colors = ButtonDefaults.buttonColors(containerColor = AppColors.Blue),&#10;            shape = RoundedCornerShape(16.dp)&#10;        ) {&#10;            if (authState is AuthState.Loading) {&#10;                CircularProgressIndicator(&#10;                    color = Color.White,&#10;                    strokeWidth = 2.dp,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;            } else {&#10;                Text(&quot;Log In&quot;, color = Color.White, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // Navigate to Signup&#10;        Row {&#10;            Text(&quot;Don’t have an account? &quot;)&#10;            Text(&#10;                &quot;Sign Up&quot;,&#10;                color = AppColors.Blue,&#10;                modifier = Modifier.clickable {&#10;                    onNavigateToSignup()&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    // Handle State Changes&#10;    LaunchedEffect(authState) {&#10;        when (authState) {&#10;            is AuthState.Authenticated -&gt; {&#10;                Toast.makeText(context, &quot;Login Successful&quot;, Toast.LENGTH_SHORT).show()&#10;                onLoginSuccess()&#10;            }&#10;&#10;            is AuthState.Error -&gt; {&#10;                val message = (authState as AuthState.Error).message&#10;                Toast.makeText(context, message, Toast.LENGTH_SHORT).show()&#10;            }&#10;&#10;            else -&gt; {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/Navigation.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/Pages/Navigation.kt" />
              <option name="originalContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;&#10;@Composable&#10;fun Navigation() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;login&quot;) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(&#10;                onLoginSuccess = { navController.navigate(&quot;home&quot;) },&#10;                onNavigateToSignup = { navController.navigate(&quot;signup&quot;) },&#10;                onNavigateToForgotPassword = { /* TODO: Navigate to ForgotPasswordScreen */ }&#10;            )&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(onNavigateToLogin = { navController.navigate(&quot;login&quot;) })&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            HomeScreen()&#10;        }&#10;        // Add HomeScreen and AddHabitScreen navigation as needed&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.Pages&#10;&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.snapshots.SnapshotStateList&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.example.habito.Models.Habit&#10;&#10;@Composable&#10;fun Navigation() {&#10;    val navController = rememberNavController()&#10;    NavHost(navController = navController, startDestination = &quot;login&quot;) {&#10;        composable(&quot;login&quot;) {&#10;            LoginScreen(&#10;                onLoginSuccess = { navController.navigate(&quot;home&quot;) },&#10;                onNavigateToSignup = { navController.navigate(&quot;signup&quot;) },&#10;                onNavigateToForgotPassword = { /* TODO: Navigate to ForgotPasswordScreen */ }&#10;            )&#10;        }&#10;        composable(&quot;signup&quot;) {&#10;            SignupScreen(onNavigateToLogin = { navController.navigate(&quot;login&quot;) })&#10;        }&#10;        composable(&quot;home&quot;) {&#10;            // Provide a sample list and lambdas for preview/testing&#10;            val habits = remember {&#10;                mutableStateListOf(&#10;                    Habit(&quot;Drink Water&quot;, &quot;Stay hydrated and fresh&quot;),&#10;                    Habit(&quot;Read 10 pages&quot;, &quot;Daily reading habit&quot;),&#10;                    Habit(&quot;Exercise&quot;, &quot;15 min of body movement&quot;)&#10;                )&#10;            }&#10;            HomeScreen(&#10;                habits = habits,&#10;                navController = navController,&#10;                onToggleComplete = { toggledHabit -&gt;&#10;                    val index = habits.indexOf(toggledHabit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(isCompleted = !habits[index].isCompleted)&#10;                    }&#10;                },&#10;                onEditHabit = { habit, newTitle, newDesc -&gt;&#10;                    val index = habits.indexOf(habit)&#10;                    if (index != -1) {&#10;                        habits[index] = habits[index].copy(title = newTitle, description = newDesc)&#10;                    }&#10;                },&#10;                onDeleteHabit = { habit -&gt;&#10;                    habits.remove(habit)&#10;                },&#10;                onAddHabit = { newHabit -&gt;&#10;                    habits.add(newHabit)&#10;                }&#10;            )&#10;        }&#10;        // Add HomeScreen and AddHabitScreen navigation as needed&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Color.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Color.kt" />
              <option name="originalContent" value="package com.example.habito.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Custom Color Theme&#10;val Blue = Color(0xFF1565C0)&#10;val LightBlue = Color(0xFF64B5F6)&#10;val PeaceBlue = Color(0xFFE3F2FD)&#10;&#10;" />
              <option name="updatedContent" value="package com.example.habito.ui.theme&#10;&#10;import androidx.compose.ui.graphics.Color&#10;&#10;// Custom Color Theme&#10;object AppColors {&#10;    val Blue = Color(0xFF1565C0)&#10;    val LightBlue = Color(0xFF64B5F6)&#10;    val PeaceBlue = Color(0xFFE3F2FD)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Theme.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/habito/ui/theme/Theme.kt" />
              <option name="originalContent" value="package com.example.habito.ui.theme&#10;&#10;import android.os.Build&#10;import androidx.compose.foundation.isSystemInDarkTheme&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.darkColorScheme&#10;import androidx.compose.material3.dynamicDarkColorScheme&#10;import androidx.compose.material3.dynamicLightColorScheme&#10;import androidx.compose.material3.lightColorScheme&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.platform.LocalContext&#10;&#10;private val DarkColorScheme = darkColorScheme(&#10;    primary = Blue,&#10;    secondary = LightBlue,&#10;    tertiary = PeaceBlue&#10;)&#10;&#10;private val LightColorScheme = lightColorScheme(&#10;    primary = Blue,&#10;    secondary = LightBlue,&#10;    tertiary = PeaceBlue&#10;&#10;    /* Other default colors to override&#10;    background = Color(0xFFFFFBFE),&#10;    surface = Color(0xFFFFFBFE),&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onTertiary = Color.White,&#10;    onBackground = Color(0xFF1C1B1F),&#10;    onSurface = Color(0xFF1C1B1F),&#10;    */&#10;)&#10;&#10;@Composable&#10;fun HabitoTheme(content: @Composable () -&gt; Unit) {&#10;    MaterialTheme(&#10;        colorScheme = lightColorScheme(&#10;            primary = HabitoColors.Primary,&#10;            secondary = HabitoColors.Accent,&#10;            background = HabitoColors.Background,&#10;            surface = HabitoColors.Surface,&#10;            onPrimary = Color.White,&#10;            onSecondary = HabitoColors.TextPrimary,&#10;            onBackground = HabitoColors.TextPrimary,&#10;            onSurface = HabitoColors.TextPrimary&#10;        ),&#10;        typography = Typography(&#10;            headlineLarge = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 28.sp&#10;            ),&#10;            headlineMedium = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.SemiBold,&#10;                fontSize = 24.sp&#10;            ),&#10;            titleLarge = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.Medium,&#10;                fontSize = 20.sp&#10;            ),&#10;            bodyLarge = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.Normal,&#10;                fontSize = 16.sp&#10;            )&#10;        ),&#10;        content = content&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.habito.ui.theme&#10;&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.TextStyle&#10;import androidx.compose.ui.text.font.FontFamily&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.sp&#10;&#10;val Blue = Color(0xFF1565C0)&#10;val LightBlue = Color(0xFF64B5F6)&#10;val PeaceBlue = Color(0xFFE3F2FD)&#10;&#10;private val LightColors = lightColorScheme(&#10;    primary = Blue,&#10;    secondary = LightBlue,&#10;    background = PeaceBlue,&#10;    surface = Color.White,&#10;    onPrimary = Color.White,&#10;    onSecondary = Color.White,&#10;    onBackground = Blue,&#10;    onSurface = Blue&#10;)&#10;&#10;@Composable&#10;fun HabitoTheme(content: @Composable () -&gt; Unit) {&#10;    MaterialTheme(&#10;        colorScheme = LightColors,&#10;        typography = Typography(&#10;            bodyLarge = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.Normal,&#10;                fontSize = 16.sp&#10;            ),&#10;            titleLarge = TextStyle(&#10;                fontFamily = FontFamily.Default,&#10;                fontWeight = FontWeight.Bold,&#10;                fontSize = 20.sp&#10;            )&#10;        ),&#10;        content = content&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>